name: Update Blocklists 2

on:
  workflow_dispatch:

env:
  SuperSecret: ${{ secrets.SuperSecret }}

jobs:
  update_blocklists:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2.5.2
        with:
          node-version: '16.x'
      - name: Set up Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          npm install @octokit/rest
      - name: Update blocklists
        run: python3 auto.py
      - name: Commit changes
        run: |
          git config --global user.email "kabbricenio@gmail.com"
          git config --global user.name "keanugithub"
          git add blocklists.txt
          git commit -m "auto update by script" --allow-empty
          # Use github-script action to push changes to remote repository
          # Requires 'repo' scope for the Personal Access Token
          # See https://github.com/actions/github-script#inputs
      - name: Install @actions/github
        run: npm install @actions/github@4
      - name: Push changes to remote repository
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.SuperSecret }}
          script: |
            const { Octokit } = require('@octokit/rest');
            const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
            const repo = process.env.GITHUB_REPOSITORY;
            const branchName = process.env.GITHUB_REF.replace('refs/heads/', '');
            const commitMessage = "auto update by script";
            const commitSha = process.env.GITHUB_SHA;
            const filePath = "blocklists.txt";
            const fileContent = fs.readFileSync(filePath, 'utf-8');
            const newContent = Buffer.from(fileContent).toString('base64');
            try {
              const { data } = await octokit.repos.createOrUpdateFileContents({
                owner: repo.split('/')[0],
                repo: repo.split('/')[1],
                path: filePath,
                message: commitMessage,
                content: newContent,
                sha: commitSha,
                branch: branchName
              });
              console.log(data);
            } catch (error) {
              console.log(error);
            }
